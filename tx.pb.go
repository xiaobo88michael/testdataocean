// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dataocean/dataocean/tx.proto

package main

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateVideo struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CoverLink   string `protobuf:"bytes,4,opt,name=coverLink,proto3" json:"coverLink,omitempty"`
	VideoLink   string `protobuf:"bytes,5,opt,name=videoLink,proto3" json:"videoLink,omitempty"`
	PriceMB     uint64 `protobuf:"varint,6,opt,name=priceMB,proto3" json:"priceMB,omitempty"`
}

func (m *MsgCreateVideo) Reset()         { *m = MsgCreateVideo{} }
func (m *MsgCreateVideo) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVideo) ProtoMessage()    {}
func (*MsgCreateVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{0}
}
func (m *MsgCreateVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVideo.Merge(m, src)
}
func (m *MsgCreateVideo) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVideo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVideo proto.InternalMessageInfo

func (m *MsgCreateVideo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateVideo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateVideo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateVideo) GetCoverLink() string {
	if m != nil {
		return m.CoverLink
	}
	return ""
}

func (m *MsgCreateVideo) GetVideoLink() string {
	if m != nil {
		return m.VideoLink
	}
	return ""
}

func (m *MsgCreateVideo) GetPriceMB() uint64 {
	if m != nil {
		return m.PriceMB
	}
	return 0
}

type MsgCreateVideoResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateVideoResponse) Reset()         { *m = MsgCreateVideoResponse{} }
func (m *MsgCreateVideoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVideoResponse) ProtoMessage()    {}
func (*MsgCreateVideoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{1}
}
func (m *MsgCreateVideoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVideoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVideoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVideoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVideoResponse.Merge(m, src)
}
func (m *MsgCreateVideoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVideoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVideoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVideoResponse proto.InternalMessageInfo

func (m *MsgCreateVideoResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgPlayVideo struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VideoId uint64 `protobuf:"varint,2,opt,name=videoId,proto3" json:"videoId,omitempty"`
}

func (m *MsgPlayVideo) Reset()         { *m = MsgPlayVideo{} }
func (m *MsgPlayVideo) String() string { return proto.CompactTextString(m) }
func (*MsgPlayVideo) ProtoMessage()    {}
func (*MsgPlayVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{2}
}
func (m *MsgPlayVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlayVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlayVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlayVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayVideo.Merge(m, src)
}
func (m *MsgPlayVideo) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlayVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayVideo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayVideo proto.InternalMessageInfo

func (m *MsgPlayVideo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPlayVideo) GetVideoId() uint64 {
	if m != nil {
		return m.VideoId
	}
	return 0
}

type MsgPlayVideoResponse struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Exp string `protobuf:"bytes,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *MsgPlayVideoResponse) Reset()         { *m = MsgPlayVideoResponse{} }
func (m *MsgPlayVideoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlayVideoResponse) ProtoMessage()    {}
func (*MsgPlayVideoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{3}
}
func (m *MsgPlayVideoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlayVideoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlayVideoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlayVideoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayVideoResponse.Merge(m, src)
}
func (m *MsgPlayVideoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlayVideoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayVideoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayVideoResponse proto.InternalMessageInfo

func (m *MsgPlayVideoResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MsgPlayVideoResponse) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

type MsgPaySign struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VideoId        uint64 `protobuf:"varint,2,opt,name=videoId,proto3" json:"videoId,omitempty"`
	Level uint64		`protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Sn uint64		`protobuf:"varint,4,opt,name=sn,proto3" json:"sn,omitempty"`
	ReceivedSizeMB uint64 `protobuf:"varint,5,opt,name=receivedSizeMB,proto3" json:"receivedSizeMB,omitempty"`
	Timestamp      uint64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *MsgPaySign) Reset()         { *m = MsgPaySign{} }
func (m *MsgPaySign) String() string { return proto.CompactTextString(m) }
func (*MsgPaySign) ProtoMessage()    {}
func (*MsgPaySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{4}
}
func (m *MsgPaySign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPaySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPaySign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPaySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPaySign.Merge(m, src)
}
func (m *MsgPaySign) XXX_Size() int {
	return m.Size()
}
func (m *MsgPaySign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPaySign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPaySign proto.InternalMessageInfo

func (m *MsgPaySign) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPaySign) GetVideoId() uint64 {
	if m != nil {
		return m.VideoId
	}
	return 0
}

func (m *MsgPaySign) GetReceivedSizeMB() uint64 {
	if m != nil {
		return m.ReceivedSizeMB
	}
	return 0
}

func (m *MsgPaySign) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type MsgPaySignResponse struct {
}

func (m *MsgPaySignResponse) Reset()         { *m = MsgPaySignResponse{} }
func (m *MsgPaySignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPaySignResponse) ProtoMessage()    {}
func (*MsgPaySignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{5}
}
func (m *MsgPaySignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPaySignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPaySignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPaySignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPaySignResponse.Merge(m, src)
}
func (m *MsgPaySignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPaySignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPaySignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPaySignResponse proto.InternalMessageInfo

type MsgSubmitPaySign struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PaySign string `protobuf:"bytes,2,opt,name=paySign,proto3" json:"paySign,omitempty"`
}

func (m *MsgSubmitPaySign) Reset()         { *m = MsgSubmitPaySign{} }
func (m *MsgSubmitPaySign) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPaySign) ProtoMessage()    {}
func (*MsgSubmitPaySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{6}
}
func (m *MsgSubmitPaySign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPaySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPaySign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPaySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPaySign.Merge(m, src)
}
func (m *MsgSubmitPaySign) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPaySign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPaySign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPaySign proto.InternalMessageInfo

func (m *MsgSubmitPaySign) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitPaySign) GetPaySign() string {
	if m != nil {
		return m.PaySign
	}
	return ""
}

type MsgSubmitPaySignResponse struct {
}

func (m *MsgSubmitPaySignResponse) Reset()         { *m = MsgSubmitPaySignResponse{} }
func (m *MsgSubmitPaySignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPaySignResponse) ProtoMessage()    {}
func (*MsgSubmitPaySignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac0fd1afd5e91081, []int{7}
}
func (m *MsgSubmitPaySignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPaySignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPaySignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPaySignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPaySignResponse.Merge(m, src)
}
func (m *MsgSubmitPaySignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPaySignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPaySignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPaySignResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateVideo)(nil), "dataocean.dataocean.MsgCreateVideo")
	proto.RegisterType((*MsgCreateVideoResponse)(nil), "dataocean.dataocean.MsgCreateVideoResponse")
	proto.RegisterType((*MsgPlayVideo)(nil), "dataocean.dataocean.MsgPlayVideo")
	proto.RegisterType((*MsgPlayVideoResponse)(nil), "dataocean.dataocean.MsgPlayVideoResponse")
	proto.RegisterType((*MsgPaySign)(nil), "dataocean.dataocean.MsgPaySign")
	proto.RegisterType((*MsgPaySignResponse)(nil), "dataocean.dataocean.MsgPaySignResponse")
	proto.RegisterType((*MsgSubmitPaySign)(nil), "dataocean.dataocean.MsgSubmitPaySign")
	proto.RegisterType((*MsgSubmitPaySignResponse)(nil), "dataocean.dataocean.MsgSubmitPaySignResponse")
}

func init() { proto.RegisterFile("dataocean/dataocean/tx.proto", fileDescriptor_ac0fd1afd5e91081) }

var fileDescriptor_ac0fd1afd5e91081 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0x6f, 0xda, 0xec, 0x96, 0xbe, 0xd5, 0xb2, 0x8c, 0x45, 0x42, 0x5c, 0x62, 0x8d, 0xa8, 0x15,
	0xb1, 0x82, 0xe2, 0xc5, 0x63, 0x05, 0x41, 0x30, 0x20, 0x29, 0x08, 0x7a, 0x91, 0x6c, 0xf2, 0x08,
	0x83, 0x6d, 0x32, 0xcc, 0xcc, 0x96, 0xd6, 0x0f, 0xe0, 0xd9, 0x8f, 0xe3, 0x47, 0xf0, 0xb8, 0x47,
	0x8f, 0xd2, 0x7e, 0x0e, 0x41, 0x66, 0xda, 0x99, 0x34, 0xc5, 0xd2, 0xe2, 0xed, 0xbd, 0xdf, 0xfb,
	0xbd, 0x7f, 0xbf, 0x19, 0x1e, 0x5c, 0x64, 0x89, 0x4c, 0xca, 0x14, 0x93, 0xe2, 0x59, 0x65, 0xc9,
	0xf9, 0x90, 0xf1, 0x52, 0x96, 0xe4, 0x96, 0xc5, 0x86, 0xd6, 0x0a, 0x7f, 0x38, 0xd0, 0x8d, 0x44,
	0xfe, 0x9a, 0x63, 0x22, 0xf1, 0x03, 0xcd, 0xb0, 0x24, 0x1e, 0xb4, 0x53, 0xe5, 0x96, 0xdc, 0x73,
	0xfa, 0xce, 0xa0, 0x13, 0x1b, 0x97, 0xf4, 0xe0, 0x44, 0x52, 0x39, 0x41, 0xaf, 0xa9, 0xf1, 0xb5,
	0x43, 0xfa, 0x70, 0x96, 0xa1, 0x48, 0x39, 0x65, 0x92, 0x96, 0x85, 0xd7, 0xd2, 0xb1, 0x6d, 0x88,
	0x5c, 0x40, 0x27, 0x2d, 0x67, 0xc8, 0xdf, 0xd1, 0xe2, 0x8b, 0xe7, 0xea, 0x78, 0x05, 0xa8, 0xe8,
	0x4c, 0x35, 0xd6, 0xd1, 0x93, 0x75, 0xd4, 0x02, 0x6a, 0x1a, 0xc6, 0x69, 0x8a, 0xd1, 0xc8, 0x3b,
	0xed, 0x3b, 0x03, 0x37, 0x36, 0x6e, 0x38, 0x80, 0xdb, 0xf5, 0xc9, 0x63, 0x14, 0xac, 0x2c, 0x04,
	0x92, 0x2e, 0x34, 0x69, 0xa6, 0x87, 0x77, 0xe3, 0x26, 0xcd, 0xc2, 0x11, 0xdc, 0x88, 0x44, 0xfe,
	0x7e, 0x92, 0x2c, 0x0e, 0x6d, 0xe8, 0x41, 0x5b, 0xb7, 0x7e, 0x9b, 0xe9, 0x1d, 0xdd, 0xd8, 0xb8,
	0xe1, 0x2b, 0xe8, 0x6d, 0xd7, 0xb0, 0xbd, 0xce, 0xa1, 0x75, 0xc5, 0x27, 0x9b, 0x3a, 0xca, 0x54,
	0x08, 0xce, 0xd9, 0x46, 0x23, 0x65, 0x86, 0xdf, 0x1c, 0x00, 0x95, 0x9c, 0x2c, 0xc6, 0x34, 0x2f,
	0xfe, 0xa7, 0x3d, 0x79, 0x08, 0x5d, 0x8e, 0x29, 0xd2, 0x19, 0x66, 0x63, 0xfa, 0x55, 0xa9, 0xd1,
	0xd2, 0x84, 0x1d, 0x54, 0x89, 0x29, 0xe9, 0x14, 0x85, 0x4c, 0xa6, 0x4c, 0x4b, 0xed, 0xc6, 0x15,
	0x10, 0xf6, 0x80, 0x54, 0x73, 0x98, 0x15, 0xc2, 0x37, 0x70, 0x1e, 0x89, 0x7c, 0x7c, 0x75, 0x39,
	0xa5, 0xf2, 0xa8, 0x19, 0xd9, 0x9a, 0xb4, 0x59, 0xd1, 0xb8, 0xa1, 0x0f, 0xde, 0x6e, 0x1d, 0xd3,
	0xe3, 0xf9, 0x9f, 0x26, 0xb4, 0x22, 0x91, 0x93, 0xcf, 0x70, 0xb6, 0xfd, 0xd7, 0xee, 0x0f, 0xff,
	0xf1, 0x29, 0x87, 0xf5, 0x67, 0xf5, 0x9f, 0x1c, 0x41, 0xb2, 0xef, 0xf1, 0x11, 0x3a, 0xd5, 0x43,
	0xdf, 0xdb, 0x97, 0x69, 0x29, 0xfe, 0xe3, 0x83, 0x14, 0x5b, 0x7a, 0x0c, 0x6d, 0x23, 0xcf, 0xdd,
	0xbd, 0x59, 0x6b, 0x82, 0xff, 0xe8, 0x00, 0xc1, 0x16, 0x45, 0xb8, 0x59, 0x57, 0xfe, 0xc1, 0xbe,
	0xcc, 0x1a, 0xcd, 0x7f, 0x7a, 0x14, 0xcd, 0xb4, 0x19, 0xbd, 0xfc, 0xb9, 0x0c, 0x9c, 0xeb, 0x65,
	0xe0, 0xfc, 0x5e, 0x06, 0xce, 0xf7, 0x55, 0xd0, 0xb8, 0x5e, 0x05, 0x8d, 0x5f, 0xab, 0xa0, 0xf1,
	0xe9, 0x4e, 0x75, 0x2a, 0xe6, 0xdb, 0x67, 0x63, 0xc1, 0x50, 0x5c, 0x9e, 0xea, 0xd3, 0xf1, 0xe2,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xf1, 0xdc, 0x2c, 0x5a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateVideo(ctx context.Context, in *MsgCreateVideo, opts ...grpc.CallOption) (*MsgCreateVideoResponse, error)
	PlayVideo(ctx context.Context, in *MsgPlayVideo, opts ...grpc.CallOption) (*MsgPlayVideoResponse, error)
	PaySign(ctx context.Context, in *MsgPaySign, opts ...grpc.CallOption) (*MsgPaySignResponse, error)
	SubmitPaySign(ctx context.Context, in *MsgSubmitPaySign, opts ...grpc.CallOption) (*MsgSubmitPaySignResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateVideo(ctx context.Context, in *MsgCreateVideo, opts ...grpc.CallOption) (*MsgCreateVideoResponse, error) {
	out := new(MsgCreateVideoResponse)
	err := c.cc.Invoke(ctx, "/dataocean.dataocean.Msg/CreateVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlayVideo(ctx context.Context, in *MsgPlayVideo, opts ...grpc.CallOption) (*MsgPlayVideoResponse, error) {
	out := new(MsgPlayVideoResponse)
	err := c.cc.Invoke(ctx, "/dataocean.dataocean.Msg/PlayVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PaySign(ctx context.Context, in *MsgPaySign, opts ...grpc.CallOption) (*MsgPaySignResponse, error) {
	out := new(MsgPaySignResponse)
	err := c.cc.Invoke(ctx, "/dataocean.dataocean.Msg/PaySign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPaySign(ctx context.Context, in *MsgSubmitPaySign, opts ...grpc.CallOption) (*MsgSubmitPaySignResponse, error) {
	out := new(MsgSubmitPaySignResponse)
	err := c.cc.Invoke(ctx, "/dataocean.dataocean.Msg/SubmitPaySign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateVideo(context.Context, *MsgCreateVideo) (*MsgCreateVideoResponse, error)
	PlayVideo(context.Context, *MsgPlayVideo) (*MsgPlayVideoResponse, error)
	PaySign(context.Context, *MsgPaySign) (*MsgPaySignResponse, error)
	SubmitPaySign(context.Context, *MsgSubmitPaySign) (*MsgSubmitPaySignResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateVideo(ctx context.Context, req *MsgCreateVideo) (*MsgCreateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (*UnimplementedMsgServer) PlayVideo(ctx context.Context, req *MsgPlayVideo) (*MsgPlayVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayVideo not implemented")
}
func (*UnimplementedMsgServer) PaySign(ctx context.Context, req *MsgPaySign) (*MsgPaySignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaySign not implemented")
}
func (*UnimplementedMsgServer) SubmitPaySign(ctx context.Context, req *MsgSubmitPaySign) (*MsgSubmitPaySignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPaySign not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataocean.dataocean.Msg/CreateVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVideo(ctx, req.(*MsgCreateVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlayVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlayVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlayVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataocean.dataocean.Msg/PlayVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlayVideo(ctx, req.(*MsgPlayVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PaySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPaySign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PaySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataocean.dataocean.Msg/PaySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PaySign(ctx, req.(*MsgPaySign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPaySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPaySign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPaySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataocean.dataocean.Msg/SubmitPaySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPaySign(ctx, req.(*MsgSubmitPaySign))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dataocean.dataocean.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideo",
			Handler:    _Msg_CreateVideo_Handler,
		},
		{
			MethodName: "PlayVideo",
			Handler:    _Msg_PlayVideo_Handler,
		},
		{
			MethodName: "PaySign",
			Handler:    _Msg_PaySign_Handler,
		},
		{
			MethodName: "SubmitPaySign",
			Handler:    _Msg_SubmitPaySign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataocean/dataocean/tx.proto",
}

func (m *MsgCreateVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriceMB != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PriceMB))
		i--
		dAtA[i] = 0x30
	}
	if len(m.VideoLink) > 0 {
		i -= len(m.VideoLink)
		copy(dAtA[i:], m.VideoLink)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VideoLink)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverLink) > 0 {
		i -= len(m.CoverLink)
		copy(dAtA[i:], m.CoverLink)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CoverLink)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVideoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVideoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVideoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlayVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlayVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VideoId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VideoId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlayVideoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayVideoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlayVideoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exp) > 0 {
		i -= len(m.Exp)
		copy(dAtA[i:], m.Exp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Exp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPaySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPaySign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPaySign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.ReceivedSizeMB != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceivedSizeMB))
		i--
		dAtA[i] = 0x18
	}
	if m.VideoId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VideoId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPaySignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPaySignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPaySignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPaySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPaySign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPaySign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaySign) > 0 {
		i -= len(m.PaySign)
		copy(dAtA[i:], m.PaySign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaySign)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPaySignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPaySignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPaySignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CoverLink)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VideoLink)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PriceMB != 0 {
		n += 1 + sovTx(uint64(m.PriceMB))
	}
	return n
}

func (m *MsgCreateVideoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgPlayVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VideoId != 0 {
		n += 1 + sovTx(uint64(m.VideoId))
	}
	return n
}

func (m *MsgPlayVideoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Exp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPaySign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VideoId != 0 {
		n += 1 + sovTx(uint64(m.VideoId))
	}
	if m.ReceivedSizeMB != 0 {
		n += 1 + sovTx(uint64(m.ReceivedSizeMB))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	return n
}

func (m *MsgPaySignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitPaySign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PaySign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitPaySignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceMB", wireType)
			}
			m.PriceMB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceMB |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVideoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVideoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVideoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			m.VideoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayVideoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayVideoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayVideoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPaySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPaySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPaySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			m.VideoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedSizeMB", wireType)
			}
			m.ReceivedSizeMB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedSizeMB |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPaySignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPaySignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPaySignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPaySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPaySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPaySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaySign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaySign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPaySignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPaySignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPaySignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
